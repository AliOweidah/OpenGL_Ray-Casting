#ifndef SHADER_PROGRAM_H
#define SHADER_PROGRAM_H

#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <map>
#include <GLEW/glew.h>
#include <glm/glm.hpp>

class ShaderProgram
{
public:
	ShaderProgram();
	~ShaderProgram();

	// compile and link a vertex and fragment shader pair
	void compileAndLink(const std::string vShaderFilename, const std::string fShaderFilename);
	// use the shader program
	void use();

	// function to set shader uniform variables
	void setUniform(const char* name, const glm::mat4& matrix);

	void Delete();
public:
	GLuint mProgramID = 0;							// shader program handle
	std::map<std::string, GLint> mUniformLocations;	// uniform locations
	GLint getUniformLocation(const char* name);		// get uniform variable locations
};

#endif
